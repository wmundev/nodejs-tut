#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('nodejs-tut:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}


// const http = require('http');

const ports = 4000;
const hostname = 'localhost';
const url = require('url');
const express = require("require");

const app = express();

app.get("/", (req, res, next) => {
    return res.send('hello, i am a web server');
});

const servers = http.createServer(function (req, res) {
    const parsedUrl = url.parse(req.url, true);

    const parseObj = new url.URL(hostname + ":" + ports + req.url);

    if (parsedUrl.pathname === "/hello") {
        res.writeHead(200, {'Content-Type': 'text/plain'});
        res.end('Hello my friend');
    } else if (parsedUrl.pathname === '/greeting') {
        //searchParams only work if it is a full url object
        console.log(parseObj.searchParams.get("name"));

        res.writeHead(200, {'Content-Type': 'application/json'});
        res.end(parseObj);

    } else {
        res.writeHead(404, {'Content-Type': 'text/plain'});
        res.end();
    }
});

servers.listen(ports, hostname, () => {
    console.log(`server running at http://${hostname}:${ports}`);
});

const assert = require('assert');

// Generate an AssertionError to compare the error message later:
const {message} = new assert.AssertionError({
    actual: 1,
    expected: 2,
    operator: 'strictEqual'
});

// Verify error output:
try {
    assert.strictEqual(1, 2);
} catch (e) {
    assert(e instanceof assert.AssertionError);
    assert.strictEqual(e.message, message);

}